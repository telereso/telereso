def props = new Properties()
file("android/gradle.properties").withInputStream { props.load(it) }

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.4.20"
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
//        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task prepareReadMe(type: Copy) {
    println("Android version : "+ props.getProperty("versionName_"))
    from 'README-template.md'
    into "./"
    rename { file -> 'README.md' }
    expand(project: project, version: props.getProperty("versionName_"),flutterVersion: props.getProperty("flutterVersionName"),
            RNVersion: props.getProperty("RNVersionName"))
}

task prepareConfigFile(type: Copy) {
    from './templates/website/_config-template.yml'
    into "./website"
    rename { file -> '_config.yml' }
    expand(project: project, version: props.getProperty("versionName_"),flutterVersion: props.getProperty("flutterVersionName"))
}

task prepareFlutterPubSpec(type: Copy) {
    println("Flutter version : "+ props.getProperty("flutterVersionName"))
    from './templates/flutter_telereso/pubspec.template.yaml'
    into "./flutter_telereso/"
    rename { file -> 'pubspec.yaml' }
    expand(project: project, version: props.getProperty("flutterVersionName"))
}

task prepareFlutterReadMe(type: Copy) {
    from './templates/flutter_telereso/README.template.md'
    into "./flutter_telereso/"
    rename { file -> 'README.md' }
    expand(project: project, version: props.getProperty("flutterVersionName"),skipDef: '$default')
}

task prepareFlutterChangeLog(type: Copy) {
    from './templates/flutter_telereso/CHANGELOG.template.md'
    into "./flutter_telereso/"
    rename { file -> 'CHANGELOG.md' }
    expand(project: project, version: props.getProperty("flutterVersionName"))
}

task prepareFlutterGeneratroPubSpec(type: Copy) {
    from './templates/telereso_generator/pubspec.template.yaml'
    into "./telereso_generator/"
    rename { file -> 'pubspec.yaml' }
    expand(project: project, version: props.getProperty("flutterVersionName"))
}

task prepareFlutterGeneratroReadMe(type: Copy) {
    from './templates/telereso_generator/README.template.md'
    into "./telereso_generator/"
    rename { file -> 'README.md' }
    expand(project: project, version: props.getProperty("flutterVersionName"),skipDef: '$default')
}

task prepareFlutterGeneratroChangeLog(type: Copy) {
    from './templates/telereso_generator/CHANGELOG.template.md'
    into "./telereso_generator/"
    rename { file -> 'CHANGELOG.md' }
    expand(project: project, version: props.getProperty("flutterVersionName"))
}

task prepareRNPackage(type: Copy) {
    println("ReactNative version : "+ props.getProperty("RNVersionName"))
    from './templates/react-native/package.template.json'
    into "./react-native/"
    rename { file -> 'package.json' }
    expand(project: project, version: props.getProperty("RNVersionName"))
}

task prepareRNChangeLog(type: Copy) {
    from './templates/react-native/CHANGELOG.template.md'
    into "./react-native/"
    rename { file -> 'CHANGELOG.md' }
    expand(project: project, version: props.getProperty("RNVersionName"))
}